// minimal shader for testing
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : require

#include "common.glsl"
#include "reflection_frame.glsl"
#include "random.glsl"
#include "microfacet.glsl"

layout(binding = 0, set = 0, rgba32f) uniform writeonly image2D displayImage;
layout(binding = 1, set = 0, rgba32f) uniform image2D accumulationImage;
layout(binding = 2, set = 0, r8ui) uniform writeonly uimage2D objectImage;
layout(binding = 4, set = 0) uniform accelerationStructureEXT TLAS;
layout(binding = 5) uniform samplerCube skySampler;

layout(location = 0) rayPayloadEXT Payload payload;
layout(location = 1) rayPayloadEXT bool inShadow;

struct Camera {
    vec3 origin;
    vec3 lower_left_corner;
    vec3 horizontal;
    vec3 vertical;
    vec3 u, v;
    float lens_radius;
};

layout(push_constant, scalar) uniform cam {
    Camera camera;
    uint numAccumulatedFrames;
};

// should this be a uniform?
const vec3 SUN_DIR = vec3(-0.494118, 0.406275, -0.768628);
const vec3 SUN_ILLUMINANCE = vec3(1.0, 1.0, 0.98) * PI;

// explicitly sample our light sources (currently just the sun)
vec3 sampleLights(Frame frame, vec3 outgoing, Material material) {
    inShadow = true;
    if (dot(payload.normal, SUN_DIR) > 0.0) { 
        uint flags = gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT;
        traceRayEXT(TLAS, flags, 0xFF, 0, 0, 1, payload.point, 0.001, SUN_DIR, 10000.0, 1);
    }
    if (!inShadow) {
        vec3 frameSunDir = worldToFrame(frame, SUN_DIR);
        vec3 brdf = f_r(frameSunDir, outgoing, material);
        return SUN_ILLUMINANCE * brdf * frameCosTheta(frameSunDir);
    } else {
        return vec3(0.0);
    }
}

struct Ray {
    vec3 origin;
    vec3 direction;
};

Ray generateDir(Camera camera, inout uint rngState) {
    vec2 randomInUnitDisk = squareToUniformDiskConcentric(vec2(stepAndOutputRNGFloat(rngState), stepAndOutputRNGFloat(rngState)));
    vec2 rd = camera.lens_radius * randomInUnitDisk;
    vec3 defocusOffset = camera.u * rd.x + camera.v * rd.y;
    
    vec2 randomCenter = vec2(0.5) + 0.25 * randomGaussian(rngState);
    vec2 uv = (vec2(gl_LaunchIDEXT.xy) + randomCenter) / vec2(gl_LaunchSizeEXT.xy);
    uv.y -= 1;
    uv.y *= -1;

    Ray ray;
    ray.origin = camera.origin + defocusOffset;
    ray.direction = normalize(camera.lower_left_corner + uv.x * camera.horizontal + uv.y * camera.vertical - defocusOffset - camera.origin);

    return ray;
}

void main() {
    uint rngState = (numAccumulatedFrames + 1) * gl_LaunchSizeEXT.x * gl_LaunchIDEXT.x + gl_LaunchIDEXT.y;

    // the result that we write to our buffer
    vec3 accumulatedColor = vec3(0.0);

    const uint MAX_BOUNCES = 8;
    const uint SAMPLES_PER_FRAME = 2;
    for (uint sampleCount = 0; sampleCount < SAMPLES_PER_FRAME; sampleCount++) {
        vec3 throughput = vec3(1.0);
        
        // set up initial directions for first bounce
        Ray initialRay = generateDir(camera, rngState);
        vec3 direction = initialRay.direction;
        vec3 origin = initialRay.origin;

        for (uint bounceCount = 0; bounceCount < MAX_BOUNCES; bounceCount++) {
            if (bounceCount == MAX_BOUNCES) {
                break;
            }
            
            traceRayEXT(TLAS, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0, origin, 0.0001, direction, 10000.0, 0);

            // if finished, add final bounce color to accumulated
            if (payload.done) {
                vec3 color = texture(skySampler, direction).rgb;
                accumulatedColor += throughput * color;
                break;
            }
            Material material = getMaterial(payload.materialIndex, payload.texcoord);
            
            Frame frame = createFrame(payload.normal);
            vec3 outgoing = worldToFrame(frame, -direction);
            accumulatedColor += (throughput * sampleLights(frame, outgoing, material));
            
            // set up info for next bounce
            origin = payload.point;
            float pdf;
            float u = stepAndOutputRNGFloat(rngState);
            float v = stepAndOutputRNGFloat(rngState);
            vec3 incoming = sample_f_r(outgoing, material, pdf, vec2(u, v));
            if (!sameHemisphere(outgoing, incoming)) {
                break;
            }
            direction = frameToWorld(frame, incoming);
            throughput *= f_r(incoming, outgoing, material) * abs(frameCosTheta(incoming)) / pdf;
        }
    }

    ivec2 imageCoords = ivec2(gl_LaunchIDEXT.xy);
    vec3 previouslyAccumulated;
    if (numAccumulatedFrames == 0) {
        imageStore(objectImage, imageCoords, uvec4(payload.index));
        previouslyAccumulated = vec3(0);
    } else {
        previouslyAccumulated = imageLoad(accumulationImage, imageCoords).rgb;
    }
    imageStore(accumulationImage, imageCoords, vec4(previouslyAccumulated + accumulatedColor, 1.0));
    imageStore(displayImage, imageCoords, vec4((previouslyAccumulated + accumulatedColor) / ((numAccumulatedFrames + 1) * SAMPLES_PER_FRAME), 1.0));
}
